{"ast":null,"code":"import _objectSpread from\"/Users/3plev.eth/Documents/prismaxrem/reminder-app/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:3001/api';// Configure axios defaults\nconst axiosInstance=axios.create({baseURL:API_URL,timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor\naxiosInstance.interceptors.request.use(config=>{var _config$method;console.log(\"Making \".concat((_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),\" request to: \").concat(config.url));return config;},error=>{console.error('Request error:',error);return Promise.reject(error);});// Response interceptor\naxiosInstance.interceptors.response.use(response=>{return response;},error=>{var _error$response;console.error('Response error:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);return Promise.reject(error);});// Types\n// API functions\nexport const api={// User registration\nasync registerUser(userData){try{const response=await axiosInstance.post('/users/register',userData);return _objectSpread(_objectSpread({},response.data),{},{success:true});}catch(error){console.error('Registration failed:',error);throw error;}},// Get all users\nasync getAllUsers(){try{const response=await axiosInstance.get('/users/all');return response.data;}catch(error){console.error('Failed to fetch users:',error);throw error;}},// Get user by ID\nasync getUserById(id){try{const response=await axiosInstance.get(\"/users/\".concat(id));return response.data;}catch(error){console.error('Failed to fetch user:',error);throw error;}},// Find user by pattern\nasync findUserByPattern(pattern){try{const response=await axiosInstance.get(\"/users/pattern/\".concat(pattern));return response.data;}catch(error){console.error('Failed to find user by pattern:',error);throw error;}},// Queue management\nasync getCurrentQueueStatus(){try{const response=await axiosInstance.get('/queue/current');return response.data;}catch(error){console.error('Failed to fetch queue status:',error);throw error;}},async getQueueHistory(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:50;let offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;try{const response=await axiosInstance.get(\"/queue/history?limit=\".concat(limit,\"&offset=\").concat(offset));return response.data;}catch(error){console.error('Failed to fetch queue history:',error);throw error;}},// Admin functions\nasync resetNotifications(){try{const response=await axiosInstance.post('/queue/reset-notifications');return response.data;}catch(error){console.error('Failed to reset notifications:',error);throw error;}},async updateNotificationStatus(userId,notified){try{const response=await axiosInstance.patch(\"/users/\".concat(userId,\"/notification-status\"),{notified});return response.data;}catch(error){console.error('Failed to update notification status:',error);throw error;}},// Health check\nasync healthCheck(){try{const response=await axiosInstance.get('/../../health');return response.data;}catch(error){console.error('Health check failed:',error);throw error;}}};// Individual export functions for backward compatibility\nexport const fetchQueueStatus=async()=>{return api.getCurrentQueueStatus();};export const fetchUserQueueStatus=async userId=>{if(userId){return api.getUserById(userId);}// If no userId provided, return current queue status\nreturn api.getCurrentQueueStatus();};export default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","concat","method","toUpperCase","url","error","Promise","reject","response","_error$response","data","message","api","registerUser","userData","post","_objectSpread","success","getAllUsers","get","getUserById","id","findUserByPattern","pattern","getCurrentQueueStatus","getQueueHistory","limit","arguments","length","undefined","offset","resetNotifications","updateNotificationStatus","userId","notified","patch","healthCheck","fetchQueueStatus","fetchUserQueueStatus"],"sources":["/Users/3plev.eth/Documents/prismaxrem/reminder-app/client/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { User, Queue, QueueStatus } from '../types';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Configure axios defaults\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\naxiosInstance.interceptors.request.use(\n  (config) => {\n    console.log(`Making ${config.method?.toUpperCase()} request to: ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\naxiosInstance.interceptors.response.use(\n  (response: AxiosResponse) => {\n    return response;\n  },\n  (error) => {\n    console.error('Response error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// Types\nexport interface UserRegistrationData {\n  username: string;\n  email: string;\n  telegramUsername?: string;\n}\n\nexport interface UserRegistrationResponse {\n  success: boolean;\n  message: string;\n  user: {\n    id: number;\n    username: string;\n    usernamePattern: string;\n    email: string;\n    isActive: boolean;\n    createdAt: string;\n    telegramUsername?: string;\n  };\n}\n\nexport interface QueueHistory {\n  history: Array<{\n    currentUserPattern: string;\n    rawContent: string;\n    timestamp: string;\n  }>;\n  count: number;\n  limit: number;\n  offset: number;\n}\n\n// API functions\nexport const api = {\n  // User registration\n  async registerUser(userData: UserRegistrationData): Promise<UserRegistrationResponse> {\n    try {\n      const response = await axiosInstance.post<UserRegistrationResponse>(\n        '/users/register', \n        userData\n      );\n      return { ...response.data, success: true };\n    } catch (error: any) {\n      console.error('Registration failed:', error);\n      throw error;\n    }\n  },\n\n  // Get all users\n  async getAllUsers(): Promise<any> {\n    try {\n      const response = await axiosInstance.get('/users/all');\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to fetch users:', error);\n      throw error;\n    }\n  },\n\n  // Get user by ID\n  async getUserById(id: number): Promise<any> {\n    try {\n      const response = await axiosInstance.get(`/users/${id}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to fetch user:', error);\n      throw error;\n    }\n  },\n\n  // Find user by pattern\n  async findUserByPattern(pattern: string): Promise<any> {\n    try {\n      const response = await axiosInstance.get(`/users/pattern/${pattern}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to find user by pattern:', error);\n      throw error;\n    }\n  },\n\n  // Queue management\n  async getCurrentQueueStatus(): Promise<QueueStatus> {\n    try {\n      const response = await axiosInstance.get<QueueStatus>('/queue/current');\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to fetch queue status:', error);\n      throw error;\n    }\n  },\n\n  async getQueueHistory(limit: number = 50, offset: number = 0): Promise<QueueHistory> {\n    try {\n      const response = await axiosInstance.get<QueueHistory>(\n        `/queue/history?limit=${limit}&offset=${offset}`\n      );\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to fetch queue history:', error);\n      throw error;\n    }\n  },\n\n  // Admin functions\n  async resetNotifications(): Promise<any> {\n    try {\n      const response = await axiosInstance.post('/queue/reset-notifications');\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to reset notifications:', error);\n      throw error;\n    }\n  },\n\n  async updateNotificationStatus(userId: number, notified: boolean): Promise<any> {\n    try {\n      const response = await axiosInstance.patch(`/users/${userId}/notification-status`, {\n        notified\n      });\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to update notification status:', error);\n      throw error;\n    }\n  },\n\n\n\n  // Health check\n  async healthCheck(): Promise<any> {\n    try {\n      const response = await axiosInstance.get('/../../health');\n      return response.data;\n    } catch (error: any) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n};\n\n// Individual export functions for backward compatibility\nexport const fetchQueueStatus = async (): Promise<QueueStatus> => {\n  return api.getCurrentQueueStatus();\n};\n\nexport const fetchUserQueueStatus = async (userId?: number): Promise<any> => {\n  if (userId) {\n    return api.getUserById(userId);\n  }\n  // If no userId provided, return current queue status\n  return api.getCurrentQueueStatus();\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}