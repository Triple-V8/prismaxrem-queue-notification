{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Configure axios defaults\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\naxiosInstance.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to: ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  console.error('Response error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Types\n\n// API functions\nexport const api = {\n  // User registration\n  async registerUser(userData) {\n    try {\n      const response = await axiosInstance.post('/users/register', userData);\n      return {\n        ...response.data,\n        success: true\n      };\n    } catch (error) {\n      console.error('Registration failed:', error);\n      throw error;\n    }\n  },\n  // Get all users\n  async getAllUsers() {\n    try {\n      const response = await axiosInstance.get('/users/all');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch users:', error);\n      throw error;\n    }\n  },\n  // Get user by ID\n  async getUserById(id) {\n    try {\n      const response = await axiosInstance.get(`/users/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch user:', error);\n      throw error;\n    }\n  },\n  // Find user by pattern\n  async findUserByPattern(pattern) {\n    try {\n      const response = await axiosInstance.get(`/users/pattern/${pattern}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to find user by pattern:', error);\n      throw error;\n    }\n  },\n  // Queue management\n  async getCurrentQueueStatus() {\n    try {\n      const response = await axiosInstance.get('/queue/current');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch queue status:', error);\n      throw error;\n    }\n  },\n  async getQueueHistory(limit = 50, offset = 0) {\n    try {\n      const response = await axiosInstance.get(`/queue/history?limit=${limit}&offset=${offset}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch queue history:', error);\n      throw error;\n    }\n  },\n  // Admin functions\n  async resetNotifications() {\n    try {\n      const response = await axiosInstance.post('/queue/reset-notifications');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to reset notifications:', error);\n      throw error;\n    }\n  },\n  async updateNotificationStatus(userId, notified) {\n    try {\n      const response = await axiosInstance.patch(`/users/${userId}/notification-status`, {\n        notified\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update notification status:', error);\n      throw error;\n    }\n  },\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await axiosInstance.get('/../../health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n};\n\n// Individual export functions for backward compatibility\nexport const fetchQueueStatus = async () => {\n  return api.getCurrentQueueStatus();\n};\nexport const fetchUserQueueStatus = async userId => {\n  if (userId) {\n    return api.getUserById(userId);\n  }\n  // If no userId provided, return current queue status\n  return api.getCurrentQueueStatus();\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","data","message","api","registerUser","userData","post","success","getAllUsers","get","getUserById","id","findUserByPattern","pattern","getCurrentQueueStatus","getQueueHistory","limit","offset","resetNotifications","updateNotificationStatus","userId","notified","patch","healthCheck","fetchQueueStatus","fetchUserQueueStatus"],"sources":["/Users/3plev.eth/Documents/prismaxrem/reminder-app/client/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { User, Queue, QueueStatus } from '../types';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Configure axios defaults\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\naxiosInstance.interceptors.request.use(\n  (config) => {\n    console.log(`Making ${config.method?.toUpperCase()} request to: ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\naxiosInstance.interceptors.response.use(\n  (response: AxiosResponse) => {\n    return response;\n  },\n  (error) => {\n    console.error('Response error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// Types\nexport interface UserRegistrationData {\n  username: string;\n  email: string;\n}\n\nexport interface UserRegistrationResponse {\n  success: boolean;\n  message: string;\n  user: {\n    id: number;\n    username: string;\n    usernamePattern: string;\n    email: string;\n    isActive: boolean;\n    createdAt: string;\n  };\n}\n\nexport interface QueueHistory {\n  history: Array<{\n    currentUserPattern: string;\n    rawContent: string;\n    timestamp: string;\n  }>;\n  count: number;\n  limit: number;\n  offset: number;\n}\n\n// API functions\nexport const api = {\n  // User registration\n  async registerUser(userData: UserRegistrationData): Promise<UserRegistrationResponse> {\n    try {\n      const response = await axiosInstance.post<UserRegistrationResponse>(\n        '/users/register', \n        userData\n      );\n      return { ...response.data, success: true };\n    } catch (error: any) {\n      console.error('Registration failed:', error);\n      throw error;\n    }\n  },\n\n  // Get all users\n  async getAllUsers(): Promise<any> {\n    try {\n      const response = await axiosInstance.get('/users/all');\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to fetch users:', error);\n      throw error;\n    }\n  },\n\n  // Get user by ID\n  async getUserById(id: number): Promise<any> {\n    try {\n      const response = await axiosInstance.get(`/users/${id}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to fetch user:', error);\n      throw error;\n    }\n  },\n\n  // Find user by pattern\n  async findUserByPattern(pattern: string): Promise<any> {\n    try {\n      const response = await axiosInstance.get(`/users/pattern/${pattern}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to find user by pattern:', error);\n      throw error;\n    }\n  },\n\n  // Queue management\n  async getCurrentQueueStatus(): Promise<QueueStatus> {\n    try {\n      const response = await axiosInstance.get<QueueStatus>('/queue/current');\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to fetch queue status:', error);\n      throw error;\n    }\n  },\n\n  async getQueueHistory(limit: number = 50, offset: number = 0): Promise<QueueHistory> {\n    try {\n      const response = await axiosInstance.get<QueueHistory>(\n        `/queue/history?limit=${limit}&offset=${offset}`\n      );\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to fetch queue history:', error);\n      throw error;\n    }\n  },\n\n  // Admin functions\n  async resetNotifications(): Promise<any> {\n    try {\n      const response = await axiosInstance.post('/queue/reset-notifications');\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to reset notifications:', error);\n      throw error;\n    }\n  },\n\n  async updateNotificationStatus(userId: number, notified: boolean): Promise<any> {\n    try {\n      const response = await axiosInstance.patch(`/users/${userId}/notification-status`, {\n        notified\n      });\n      return response.data;\n    } catch (error: any) {\n      console.error('Failed to update notification status:', error);\n      throw error;\n    }\n  },\n\n\n\n  // Health check\n  async healthCheck(): Promise<any> {\n    try {\n      const response = await axiosInstance.get('/../../health');\n      return response.data;\n    } catch (error: any) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n};\n\n// Individual export functions for backward compatibility\nexport const fetchQueueStatus = async (): Promise<QueueStatus> => {\n  return api.getCurrentQueueStatus();\n};\n\nexport const fetchUserQueueStatus = async (userId?: number): Promise<any> => {\n  if (userId) {\n    return api.getUserById(userId);\n  }\n  // If no userId provided, return current queue status\n  return api.getCurrentQueueStatus();\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}